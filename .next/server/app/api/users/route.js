"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/users/route";
exports.ids = ["app/api/users/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_user_OneDrive_Desktop_Simbi_Seller_app_api_users_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/users/route.ts */ \"(rsc)/./app/api/users/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/users/route\",\n        pathname: \"/api/users\",\n        filename: \"route\",\n        bundlePath: \"app/api/users/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\Simbi-Seller\\\\app\\\\api\\\\users\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_user_OneDrive_Desktop_Simbi_Seller_app_api_users_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/users/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ1c2VycyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdXNlcnMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ1c2VycyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUN1c2VyJTVDT25lRHJpdmUlNUNEZXNrdG9wJTVDU2ltYmktU2VsbGVyJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUN1c2VyJTVDT25lRHJpdmUlNUNEZXNrdG9wJTVDU2ltYmktU2VsbGVyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMyQjtBQUN4RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbWJpLXNlbGxlci1kYXNoYm9hcmQvPzI3YzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcdXNlclxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXFNpbWJpLVNlbGxlclxcXFxhcHBcXFxcYXBpXFxcXHVzZXJzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91c2Vycy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VzZXJzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS91c2Vycy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXHVzZXJcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxTaW1iaS1TZWxsZXJcXFxcYXBwXFxcXGFwaVxcXFx1c2Vyc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdXNlcnMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/users/route.ts":
/*!********************************!*\
  !*** ./app/api/users/route.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./src/lib/database.ts\");\n\n\nasync function GET(req) {\n    const url = new URL(req.url);\n    const uid = url.searchParams.get(\"uid\");\n    const test = url.searchParams.get(\"test\");\n    const migrate = url.searchParams.get(\"migrate\");\n    try {\n        // Health check endpoint\n        if (test === \"1\") {\n            const connectionTest = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_1__.testDatabaseConnection)();\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                database: connectionTest.success ? \"connected\" : \"disconnected\",\n                message: connectionTest.message,\n                timestamp: new Date().toISOString()\n            });\n        }\n        // Migration endpoint for syncing existing Firebase users\n        if (migrate === \"1\") {\n            try {\n                const migrationResult = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.userMigration.syncExistingUsersWithDatabase();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    message: migrationResult.message,\n                    dbUserCount: migrationResult.dbUserCount,\n                    timestamp: new Date().toISOString()\n                });\n            } catch (migrationError) {\n                console.error(\"Migration endpoint error:\", migrationError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Migration failed\",\n                    details: migrationError.message\n                }, {\n                    status: 500\n                });\n            }\n        }\n        // Test database connection first\n        const connectionTest = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_1__.testDatabaseConnection)();\n        if (!connectionTest.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database connection failed\",\n                details: connectionTest.message,\n                fallback: \"Using localStorage mode\"\n            }, {\n                status: 503\n            });\n        }\n        if (uid) {\n            const user = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.userOperations.getUser(uid);\n            if (user) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    user: {\n                        uid: user.uid,\n                        email: user.email,\n                        displayName: user.display_name,\n                        storeName: user.store_name,\n                        phoneNumber: user.phone_number,\n                        nationalId: user.national_id,\n                        businessOwnerName: user.business_owner_name,\n                        businessOwnerEmail: user.business_owner_email,\n                        businessOwnerPhone: user.business_owner_phone,\n                        storeCountry: user.store_country,\n                        storeCity: user.store_city,\n                        storeAddress1: user.store_address1,\n                        storeAddress2: user.store_address2,\n                        postalCode: user.postal_code,\n                        vatNumber: user.vat_number,\n                        createdAt: user.created_at,\n                        updatedAt: user.updated_at\n                    }\n                });\n            } else {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    user: null,\n                    message: \"User not found in database\"\n                });\n            }\n        }\n        // Return empty array if no uid specified\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            users: []\n        });\n    } catch (error) {\n        console.error(\"Database query error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Database query failed\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        console.log(\"API POST request body:\", body);\n        if (!body || !body.uid || !body.email) {\n            console.error(\"Missing required fields:\", {\n                uid: !!body?.uid,\n                email: !!body?.email\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields: uid and email\"\n            }, {\n                status: 400\n            });\n        }\n        // Test database connection first\n        const connectionTest = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_1__.testDatabaseConnection)();\n        if (!connectionTest.success) {\n            console.error(\"Database connection failed:\", connectionTest.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database connection failed\",\n                details: connectionTest.message,\n                fallback: \"Please use localStorage mode for now\"\n            }, {\n                status: 503\n            });\n        }\n        // Create or update user in database\n        const user = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.userOperations.createOrUpdateUser({\n            uid: body.uid,\n            email: body.email,\n            displayName: body.displayName,\n            storeName: body.storeName,\n            phoneNumber: body.phoneNumber,\n            nationalId: body.nationalId,\n            businessOwnerName: body.businessOwnerName,\n            businessOwnerEmail: body.businessOwnerEmail,\n            businessOwnerPhone: body.businessOwnerPhone,\n            storeCountry: body.storeCountry,\n            storeCity: body.storeCity,\n            storeAddress1: body.storeAddress1,\n            storeAddress2: body.storeAddress2,\n            postalCode: body.postalCode,\n            vatNumber: body.vatNumber\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            user: {\n                uid: user.uid,\n                email: user.email,\n                displayName: user.display_name,\n                storeName: user.store_name,\n                phoneNumber: user.phone_number,\n                nationalId: user.national_id,\n                businessOwnerName: user.business_owner_name,\n                businessOwnerEmail: user.business_owner_email,\n                businessOwnerPhone: user.business_owner_phone,\n                storeCountry: user.store_country,\n                storeCity: user.store_city,\n                storeAddress1: user.store_address1,\n                storeAddress2: user.store_address2,\n                postalCode: user.postal_code,\n                vatNumber: user.vat_number,\n                createdAt: user.created_at,\n                updatedAt: user.updated_at\n            }\n        });\n    } catch (error) {\n        console.error(\"Database operation error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Database operation failed\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(req) {\n    try {\n        const body = await req.json();\n        console.log(\"API PUT request body:\", body);\n        if (!body || !body.uid || !body.email) {\n            console.error(\"Missing required fields:\", {\n                uid: !!body?.uid,\n                email: !!body?.email\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields: uid and email\"\n            }, {\n                status: 400\n            });\n        }\n        // Test database connection first\n        const connectionTest = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_1__.testDatabaseConnection)();\n        if (!connectionTest.success) {\n            console.error(\"Database connection failed:\", connectionTest.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database connection failed\",\n                details: connectionTest.message,\n                fallback: \"Please use localStorage mode for now\"\n            }, {\n                status: 503\n            });\n        }\n        // Create user from Firebase data (migration endpoint)\n        const user = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.userMigration.createUserFromFirebaseData({\n            uid: body.uid,\n            email: body.email,\n            displayName: body.displayName\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"User migrated successfully\",\n            user: {\n                uid: user.uid,\n                email: user.email,\n                displayName: user.display_name,\n                createdAt: user.created_at,\n                updatedAt: user.updated_at\n            }\n        });\n    } catch (error) {\n        console.error(\"Migration operation error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Migration operation failed\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/users/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database.ts":
/*!*****************************!*\
  !*** ./src/lib/database.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dbPool: () => (/* binding */ dbPool),\n/* harmony export */   healthCheck: () => (/* binding */ healthCheck),\n/* harmony export */   testDatabaseConnection: () => (/* binding */ testDatabaseConnection),\n/* harmony export */   userMigration: () => (/* binding */ userMigration),\n/* harmony export */   userOperations: () => (/* binding */ userOperations)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);\n\nconst DATABASE_URL = process.env.DATABASE_URL;\nif (!DATABASE_URL) {\n    throw new Error(\"DATABASE_URL environment variable is required\");\n}\n// Production-ready connection pool with optimized settings\nconst dbPool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString: DATABASE_URL,\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 15000,\n    ssl: {\n        rejectUnauthorized: false\n    },\n    // Neon-specific optimizations\n    keepAlive: true,\n    keepAliveInitialDelayMillis: 0\n});\n// Test database connection with retry logic\nasync function testDatabaseConnection(retries = 3) {\n    let client;\n    let attempt = 0;\n    while(attempt < retries){\n        try {\n            client = await dbPool.connect();\n            console.log(`✅ Database connection successful (attempt ${attempt + 1})`);\n            // Test with a simple query\n            await client.query(\"SELECT 1\");\n            console.log(\"✅ Database query test passed\");\n            // Ensure users table exists with production schema\n            await client.query(`\r\n        CREATE TABLE IF NOT EXISTS users (\r\n          uid TEXT PRIMARY KEY,\r\n          email TEXT UNIQUE NOT NULL,\r\n          display_name TEXT,\r\n          store_name TEXT,\r\n          phone_number TEXT,\r\n          national_id TEXT,\r\n          business_owner_name TEXT,\r\n          business_owner_email TEXT,\r\n          business_owner_phone TEXT,\r\n          store_country TEXT,\r\n          store_city TEXT,\r\n          store_address1 TEXT,\r\n          store_address2 TEXT,\r\n          postal_code TEXT,\r\n          vat_number TEXT,\r\n          profile_json JSONB,\r\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\r\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n        );\r\n      `);\n            // Create indexes for better performance\n            await client.query(`\r\n        CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\r\n        CREATE INDEX IF NOT EXISTS idx_users_store_name ON users(store_name);\r\n        CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);\r\n      `);\n            console.log(\"✅ Users table and indexes ready\");\n            return {\n                success: true,\n                message: \"Database connected successfully\"\n            };\n        } catch (error) {\n            attempt++;\n            console.error(`❌ Database connection attempt ${attempt} failed:`, error.message);\n            if (attempt >= retries) {\n                return {\n                    success: false,\n                    message: `Database connection failed after ${retries} attempts: ${error.message}`\n                };\n            }\n            // Wait before retry (exponential backoff)\n            await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 1000));\n        } finally{\n            if (client) client.release();\n        }\n    }\n    return {\n        success: false,\n        message: \"Database connection failed\"\n    };\n}\n// Production-ready user operations with error handling\nconst userOperations = {\n    async createOrUpdateUser (userData) {\n        const client = await dbPool.connect();\n        try {\n            const query = `\r\n        INSERT INTO users (\r\n          uid, email, display_name, store_name, phone_number, national_id,\r\n          business_owner_name, business_owner_email, business_owner_phone,\r\n          store_country, store_city, store_address1, store_address2,\r\n          postal_code, vat_number, profile_json, updated_at\r\n        ) VALUES (\r\n          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, NOW()\r\n        )\r\n        ON CONFLICT (uid) DO UPDATE SET\r\n          email = EXCLUDED.email,\r\n          display_name = EXCLUDED.display_name,\r\n          store_name = EXCLUDED.store_name,\r\n          phone_number = EXCLUDED.phone_number,\r\n          national_id = EXCLUDED.national_id,\r\n          business_owner_name = EXCLUDED.business_owner_name,\r\n          business_owner_email = EXCLUDED.business_owner_email,\r\n          business_owner_phone = EXCLUDED.business_owner_phone,\r\n          store_country = EXCLUDED.store_country,\r\n          store_city = EXCLUDED.store_city,\r\n          store_address1 = EXCLUDED.store_address1,\r\n          store_address2 = EXCLUDED.store_address2,\r\n          postal_code = EXCLUDED.postal_code,\r\n          vat_number = EXCLUDED.vat_number,\r\n          profile_json = EXCLUDED.profile_json,\r\n          updated_at = NOW()\r\n        RETURNING *;\r\n      `;\n            const values = [\n                userData.uid,\n                userData.email,\n                userData.displayName || null,\n                userData.storeName || null,\n                userData.phoneNumber || null,\n                userData.nationalId || null,\n                userData.businessOwnerName || null,\n                userData.businessOwnerEmail || null,\n                userData.businessOwnerPhone || null,\n                userData.storeCountry || null,\n                userData.storeCity || null,\n                userData.storeAddress1 || null,\n                userData.storeAddress2 || null,\n                userData.postalCode || null,\n                userData.vatNumber || null,\n                JSON.stringify(userData)\n            ];\n            const result = await client.query(query, values);\n            console.log(\"✅ User data saved to database:\", userData.uid);\n            return result.rows[0];\n        } catch (error) {\n            console.error(\"❌ Database operation failed:\", error);\n            throw new Error(`Failed to save user data: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    },\n    async getUser (uid) {\n        const client = await dbPool.connect();\n        try {\n            const result = await client.query(\"SELECT * FROM users WHERE uid = $1\", [\n                uid\n            ]);\n            const user = result.rows[0] || null;\n            if (user) {\n                console.log(\"✅ User data retrieved from database:\", uid);\n            } else {\n                console.log(\"ℹ️ No user found in database:\", uid);\n            }\n            return user;\n        } catch (error) {\n            console.error(\"❌ Database query failed:\", error);\n            throw new Error(`Failed to retrieve user data: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    },\n    async getUserByEmail (email) {\n        const client = await dbPool.connect();\n        try {\n            const result = await client.query(\"SELECT * FROM users WHERE email = $1\", [\n                email\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error(\"❌ Database query failed:\", error);\n            throw new Error(`Failed to retrieve user by email: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    },\n    async deleteUser (uid) {\n        const client = await dbPool.connect();\n        try {\n            const result = await client.query(\"DELETE FROM users WHERE uid = $1 RETURNING *\", [\n                uid\n            ]);\n            console.log(\"✅ User deleted from database:\", uid);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error(\"❌ Database delete failed:\", error);\n            throw new Error(`Failed to delete user: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    }\n};\n// Health check function for monitoring\nasync function healthCheck() {\n    try {\n        const connectionTest = await testDatabaseConnection(1);\n        return {\n            database: connectionTest.success ? \"healthy\" : \"unhealthy\",\n            timestamp: new Date().toISOString(),\n            message: connectionTest.message\n        };\n    } catch (error) {\n        return {\n            database: \"unhealthy\",\n            timestamp: new Date().toISOString(),\n            message: error.message\n        };\n    }\n}\n// Migration function to sync existing Firebase users with database\nconst userMigration = {\n    async syncExistingUsersWithDatabase () {\n        const client = await dbPool.connect();\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting user migration to sync existing Firebase users...\");\n            // Get all users from database\n            const dbUsers = await client.query(\"SELECT uid, email, created_at FROM users\");\n            const dbUserMap = new Map(dbUsers.rows.map((user)=>[\n                    user.uid,\n                    user\n                ]));\n            console.log(`📊 Found ${dbUsers.rows.length} users in database`);\n            // For now, we'll create a placeholder function that can be called\n            // when we have access to Firebase Admin SDK or user list\n            // This is a starting point for the migration\n            return {\n                success: true,\n                message: `Database ready for migration. Found ${dbUsers.rows.length} existing users.`,\n                dbUserCount: dbUsers.rows.length\n            };\n        } catch (error) {\n            console.error(\"❌ Migration error:\", error);\n            throw new Error(`Migration failed: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    },\n    async createUserFromFirebaseData (userData) {\n        const client = await dbPool.connect();\n        try {\n            console.log(\"\\uD83D\\uDCDD Creating user from Firebase data:\", userData.uid);\n            const query = `\r\n        INSERT INTO users (\r\n          uid, email, display_name, profile_json, updated_at\r\n        ) VALUES (\r\n          $1, $2, $3, $4, NOW()\r\n        )\r\n        ON CONFLICT (uid) DO UPDATE SET\r\n          email = EXCLUDED.email,\r\n          display_name = EXCLUDED.display_name,\r\n          profile_json = EXCLUDED.profile_json,\r\n          updated_at = NOW()\r\n        RETURNING *;\r\n      `;\n            const values = [\n                userData.uid,\n                userData.email,\n                userData.displayName || null,\n                JSON.stringify(userData)\n            ];\n            const result = await client.query(query, values);\n            console.log(\"✅ User created/updated from Firebase data:\", userData.uid);\n            return result.rows[0];\n        } catch (error) {\n            console.error(\"❌ Error creating user from Firebase data:\", error);\n            throw new Error(`Failed to create user: ${error.message}`);\n        } finally{\n            client.release();\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cuser%5COneDrive%5CDesktop%5CSimbi-Seller&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();